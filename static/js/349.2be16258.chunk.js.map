{"version":3,"file":"static/js/349.2be16258.chunk.js","mappings":"0NAEaA,EAAYC,EAAAA,GAAAA,GAAH,qKAGN,qBAAGC,MAAkBC,OAAOC,IAA5B,IAEU,qBAAGF,MAAkBG,UAAUC,OAA/B,IAObC,EAAWN,EAAAA,GAAAA,IAAH,qGAMRO,EAAYP,EAAAA,GAAAA,IAAH,qG,SChBTQ,EAAa,SAAC,GAEpB,IAAD,IADJC,MAASC,EACL,EADKA,GAAIC,EACT,EADSA,YAAaC,EACtB,EADsBA,eAAgBC,EACtC,EADsCA,cAAeC,EACrD,EADqDA,aAEnDC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACjB,EAAD,WACE,UAAC,KAAD,CAAMkB,MAAO,CAAEC,KAAMH,GAAYI,GAAE,kBAAaT,GAAhD,WACE,SAACJ,EAAD,CACEc,IACET,EACI,kCAAoCA,EACpC,kHAENU,IAAKT,GAAkBC,KAEzB,UAACN,EAAD,YACE,wBAAKK,GAAkBC,KACvB,0CACiB,IAAIS,KAAKR,GAAcS,eAAiB,oBAMlE,EC3BYC,EAAOxB,EAAAA,GAAAA,GAAH,4HCEJyB,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAC3B,OACE,SAACF,EAAD,UACGE,EAAOC,KAAI,SAAAlB,GACV,OAAO,SAACD,EAAD,CAA2BC,MAAOA,GAAjBA,EAAMC,GAC/B,KAGN,C,iKCVYkB,E,QAAc5B,GAAAA,GAAH,oFAEb,qBAAGC,MAAkB4B,OAAOC,KAA5B,I,mBCkCX,EA/Ba,WACX,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOL,EAAP,KAAeM,EAAf,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,sGAEdF,GAAa,GAFC,UAGYG,EAAAA,EAAAA,MAHZ,gBAGNC,EAHM,EAGNA,QACRN,EAAUM,GAJI,gDAMdC,QAAQC,IAAR,MANc,yBAQdN,GAAa,GARC,4EAAH,qDAYfE,GACD,GAAE,KAGD,iCACE,UAACK,EAAA,EAAD,YACE,SAACb,EAAD,8BACA,SAACH,EAAA,EAAD,CAAYC,OAAQA,QAEtB,SAACgB,EAAA,EAAD,CAAQC,QAASV,MAGtB,C,mMCjCDW,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAS,CACbA,OAAQ,CACNC,QALmB,qCASVT,EAAmB,mCAAG,sGACVO,EAAAA,EAAAA,IAAA,qBAAgCC,GADtB,uBACzBE,EADyB,EACzBA,KADyB,kBAG1BA,GAH0B,2CAAH,qDAMnBC,EAAiB,mCAAG,WAAMvC,GAAN,yFACRmC,EAAAA,EAAAA,IAAA,6BAAgCnC,GAASoC,GADjC,uBACvBE,EADuB,EACvBA,KADuB,kBAGxBA,GAHwB,2CAAH,sDAMjBE,EAAiB,mCAAG,WAAMvC,GAAN,yFACRkC,EAAAA,EAAAA,IAAA,gBAAmBlC,GAAMmC,GADjB,uBACvBE,EADuB,EACvBA,KADuB,kBAGxBA,GAHwB,2CAAH,sDAMjBG,EAAiB,mCAAG,WAAMxC,GAAN,yFACRkC,EAAAA,EAAAA,IAAA,gBAAmBlC,EAAnB,YAAiCmC,GADzB,uBACvBE,EADuB,EACvBA,KADuB,kBAGxBA,GAHwB,2CAAH,sDAMjBI,EAAiB,mCAAG,WAAMzC,GAAN,yFACRkC,EAAAA,EAAAA,IAAA,gBAAmBlC,EAAnB,YAAiCmC,GADzB,uBACvBE,EADuB,EACvBA,KADuB,kBAGxBA,GAHwB,2CAAH,qD","sources":["components/MoviesItem/MoviesItem.styled.jsx","components/MoviesItem/MoviesItem.jsx","components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","pages/Home/Home.styled.jsx","pages/Home/Home.jsx","services/movieAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const MovieItem = styled.li`\n  width: 200px;\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.shadow.card};\n\n  transition: transform ${({ theme }) => theme.animation.default};\n\n  :hover {\n    transform: scale(1.05);\n  }\n`;\n\nexport const MovieImg = styled.img`\n  min-height: 300px;\n  border-radius: 10px 10px 0 0;\n  object-fit: cover;\n`;\n\nexport const MovieDesc = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  padding: 10px;\n`;\n","import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport { MovieDesc, MovieImg, MovieItem } from './MoviesItem.styled';\n\nexport const MoviesItem = ({\n  movie: { id, poster_path, original_title, original_name, release_date },\n}) => {\n  const location = useLocation();\n\n  return (\n    <MovieItem>\n      <Link state={{ from: location }} to={`/movies/${id}`}>\n        <MovieImg\n          src={\n            poster_path\n              ? 'https://image.tmdb.org/t/p/w500' + poster_path\n              : 'https://static.vecteezy.com/system/resources/previews/005/337/799/original/icon-image-not-found-free-vector.jpg'\n          }\n          alt={original_title || original_name}\n        />\n        <MovieDesc>\n          <h3>{original_title || original_name}</h3>\n          <p>\n            Release year: {new Date(release_date).getFullYear() || 'Unknown'}\n          </p>\n        </MovieDesc>\n      </Link>\n    </MovieItem>\n  );\n};\n\nMoviesItem.propTypes = {\n  movie: PropTypes.object.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  gap: 30px;\n  padding: 30px 0;\n`;\n","import PropTypes from 'prop-types';\nimport { MoviesItem } from 'components/MoviesItem';\nimport { List } from './MoviesList.styled';\n\nexport const MoviesList = ({ movies }) => {\n  return (\n    <List>\n      {movies.map(movie => {\n        return <MoviesItem key={movie.id} movie={movie} />;\n      })}\n    </List>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.array.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const MoviesTitle = styled.h2`\n  padding-top: 30px;\n  color: ${({ theme }) => theme.colors.black};\n  text-align: center;\n`;\n","import { useEffect, useState } from 'react';\nimport { MoviesList } from 'components/MoviesList';\nimport { fetchTrendingMovies } from 'services/movieAPI';\nimport { Container } from 'components/Container';\nimport { MoviesTitle } from './Home.styled';\nimport { Loader } from 'components/Loader';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const getMovies = async () => {\n      try {\n        setIsLoading(true);\n        const { results } = await fetchTrendingMovies();\n        setMovies(results);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getMovies();\n  }, []);\n\n  return (\n    <>\n      <Container>\n        <MoviesTitle>Trending today</MoviesTitle>\n        <MoviesList movies={movies} />\n      </Container>\n      <Loader loading={isLoading} />\n    </>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n\nexport const API_KEY = 'b5dbc40d665affe8ed0bac71106b3fa8';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst params = {\n  params: {\n    api_key: API_KEY,\n  },\n};\n\nexport const fetchTrendingMovies = async () => {\n  const { data } = await axios.get(`trending/movie/day`, params);\n\n  return data;\n};\n\nexport const fetchSearchMovies = async movie => {\n  const { data } = await axios.get(`search/movie?query=${movie}`, params);\n\n  return data;\n};\n\nexport const fetchMovieDetails = async id => {\n  const { data } = await axios.get(`movie/${id}`, params);\n\n  return data;\n};\n\nexport const fetchMovieCredits = async id => {\n  const { data } = await axios.get(`movie/${id}/credits`, params);\n\n  return data;\n};\n\nexport const fetchMovieReviews = async id => {\n  const { data } = await axios.get(`movie/${id}/reviews`, params);\n\n  return data;\n};\n"],"names":["MovieItem","styled","theme","shadow","card","animation","default","MovieImg","MovieDesc","MoviesItem","movie","id","poster_path","original_title","original_name","release_date","location","useLocation","state","from","to","src","alt","Date","getFullYear","List","MoviesList","movies","map","MoviesTitle","colors","black","useState","setMovies","isLoading","setIsLoading","useEffect","getMovies","fetchTrendingMovies","results","console","log","Container","Loader","loading","axios","params","api_key","data","fetchSearchMovies","fetchMovieDetails","fetchMovieCredits","fetchMovieReviews"],"sourceRoot":""}